cos_term <- (gamm/2)*cos((2*pi/18)*sig.str*t)
sin_term <- sig.str*sin((2*pi/18)*sig.str*t)
return(-exp_term*(cos_term + sin_term))
}
## Evolution of momentum with time
mom_function <- function(t, gamma = 0.1, sig = 1){
exp_term <- exp(-gamm*t/2)
sig.str <- (sig^-1)*(1-4*sig^2*gamm^2)^0.5
cos_term <- (gamm/2)*cos((2*pi/18)*sig.str*t)
sin_term <- sig.str*sin((2*pi/18)*sig.str*t)
return(-exp_term*(cos_term + sin_term))
}
time <- seq(0,100,0.1)
momentums <- mom_function(time)
mom_function <- function(t, gamm = 0.1, sig = 1){
exp_term <- exp(-gamm*t/2)
sig.str <- (sig^-1)*(1-4*sig^2*gamm^2)^0.5
cos_term <- (gamm/2)*cos((2*pi/18)*sig.str*t)
sin_term <- sig.str*sin((2*pi/18)*sig.str*t)
return(-exp_term*(cos_term + sin_term))
}
time <- seq(0,100,0.1)
momentums <- mom_function(time)
plot(time, momentums,
main = "Decay of Momentum with time")
lines(time, momentums, col = "red")
## Comparing postions and momentums
plot(
positions,
momentums
)
plot(
positions,
momentums,
xlab = "Position",
ylab = "Momentum",
main = "Momentum compared with Postion"
)
points(positions[1],momentums[1], col = "orange")
points(positions[1],momentums[1], col = "orange", pch = 19)
points(positions[1],momentums[1], col = "orange", pch = 19, size = 10)
?points
points(positions[1],momentums[1], col = "orange", pch = 19, cex = 10)
points(positions[1],momentums[1], col = "orange", pch = 19, cex = 2)
plot(
positions,
momentums,
xlab = "Position",
ylab = "Momentum",
main = "Momentum compared with Postion"
)
points(positions[1],momentums[1], col = "orange", pch = 19, cex = 2)
points(positions[1e3],momentums[1e3], col = "cyan", pch = 19, cex = 2)
legend(
"topright",
c("orange","cyan"),
c("T = 0", "T = 100")
)
legend(
"topright",
c("T = 0", "T = 100"),
c("orange","cyan")
)
legend(
"topright",
fill = c("orange","cyan"),
c("T = 0", "T = 100")
)
plot(time, momentums,
main = "Decay of Momentum with time",
ylab = "Momentum",
cex.main = 2
)
lines(time, momentums, col = "red", lwt = 5)
lines(time, momentums, col = "red", lwd = 5)
plot(time, momentums,
main = "Decay of Momentum with time",
ylab = "Momentum",
cex.main = 2
)
lines(time, momentums, col = "red", lwd = 2)
plot(time, positions,
main = "Decay of Position with time",
ylab = "Position",
cex.main = 2
)
lines(time, positions, col = "red", lwd = 2)
shiny::runApp('MTH208/class-project-group_2/raHMC_Visualisations')
?sliderInput
runApp('MTH208/class-project-group_2/raHMC_Visualisations')
runApp('MTH208/class-project-group_2/raHMC_Visualisations')
shiny::runApp('Research/Multimodal-HMC/Codes/raHMC Visualisations App')
## Evolution of position with time
pos_function <- function(t, gamm = 0.1, sig = 1){
exp_term <- exp(-gamm*t/2)
sig.str <- (sig^-1)*(1-4*sig^2*gamm^2)^0.5
cos_term <- cos((2*pi/18)*sig.str*t)
return(exp_term*cos_term)
}
time <- seq(0,100,0.1)
positions <- pos_function(time, gamm = -0.1)
plot(time, positions,
main = "Decay of Position with time",
ylab = "Position",
cex.main = 2
)
lines(time, positions, col = "red", lwd = 2)
mom_function <- function(t, gamm = 0.1, sig = 1){
exp_term <- exp(-gamm*t/2)
sig.str <- (sig^-1)*(1-4*sig^2*gamm^2)^0.5
cos_term <- (gamm/2)*cos((2*pi/18)*sig.str*t)
sin_term <- sig.str*sin((2*pi/18)*sig.str*t)
return(-exp_term*(cos_term + sin_term))
}
momentums <- mom_function(time, gamm = -.1)
plot(time, momentums,
main = "Decay of Momentum with time",
ylab = "Momentum",
cex.main = 2
)
lines(time, momentums, col = "red", lwd = 2)
## Comparing postions and momentums
plot(
positions,
momentums,
xlab = "Position",
ylab = "Momentum",
main = "Momentum compared with Postion"
)
points(positions[1],momentums[1], col = "orange", pch = 19, cex = 2)
points(positions[1e3],momentums[1e3], col = "cyan", pch = 19, cex = 2)
legend(
"topright",
fill = c("orange","cyan"),
c("T = 0", "T = 100")
)
#Storing the data
write_xlsx(plot.data.private, "Private.xlsx")
# Load required libraries
library(ggplot2)
library(MASS)        # For multivariate normal distribution
library(dplyr)       # For data wrangling
library(ggdensity)   # For nice KDE contour plots
install.packages("ggdensity")
# Load required libraries
library(ggplot2)
library(MASS)        # For multivariate normal distribution
library(dplyr)       # For data wrangling
library(ggdensity)   # For nice KDE contour plots
# Simulate 2D Density Distributions
set.seed(42)
mu1 <- c(-2, -2)
mu2 <- c(2, 2)
sigma <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
density1 <- mvrnorm(n = 500, mu = mu1, Sigma = sigma)
density2 <- mvrnorm(n = 500, mu = mu2, Sigma = sigma)
density_df <- as.data.frame(rbind(density1, density2))
colnames(density_df) <- c("x", "y")
# Generate Synthetic HMC-like Trajectories
trajectory_hmc <- data.frame(
x = c(-3, -2, -1, 0, 1, 1.5),
y = c(-3, -2.5, -1, 1, 2, 2.5),
method = "HMC"
)
trajectory_ra_hmc <- data.frame(
x = c(-3, -1.5, -0.5, 0.5, 1.5, 2),
y = c(-3, -1.8, -1, 0, 1.5, 2.8),
method = "RA-HMC"
)
trajectory_neg_friction <- data.frame(
x = c(-3, -1, 0, 1, 3),
y = c(-3, -1, 0.5, 1.8, 3),
method = "Negative Friction"
)
# Combine all trajectories
trajectories <- bind_rows(trajectory_hmc, trajectory_ra_hmc, trajectory_neg_friction)
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_minimal() +
labs(title = "HMC vs RA-HMC Sampling Trajectories",
x = "X-axis", y = "Y-axis") +
theme(legend.position = "bottom")
# Simulate 2D Density Distributions
set.seed(42)
mu1 <- c(-2, -2)
mu2 <- c(2, 2)
sigma <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
density1 <- mvrnorm(n = 500, mu = mu1, Sigma = sigma)
density2 <- mvrnorm(n = 500, mu = mu2, Sigma = sigma)
density_df <- as.data.frame(rbind(density1, density2))
colnames(density_df) <- c("x", "y")
# Generate Synthetic HMC-like Trajectories
trajectory_hmc <- data.frame(
x = c(-3, -2, -1, 0, 1, 1.5),
y = c(-3, -2.5, -1, 1, 2, 2.5),
method = "HMC"
)
trajectory_ra_hmc <- data.frame(
x = c(-3, -1.5, -0.5, 0.5, 1.5, 2),
y = c(-3, -1.8, -1, 0, 1.5, 2.8),
method = "RA-HMC"
)
trajectory_neg_friction <- data.frame(
x = c(-3, -1, 0, 1, 3),
y = c(-3, -1, 0.5, 1.8, 3),
method = "Negative Friction"
)
# Combine all trajectories
trajectories <- bind_rows(trajectory_hmc, trajectory_ra_hmc, trajectory_neg_friction)
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
#####################################
# Option - 1
#####################################
# Load required libraries
library(ggplot2)
library(MASS)        # For multivariate normal distribution
library(dplyr)       # For data wrangling
library(ggdensity)   # For nice KDE contour plots
# Simulate 2D Density Distributions
set.seed(42)
mu1 <- c(-2, -2)
mu2 <- c(2, 2)
sigma <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
density1 <- mvrnorm(n = 500, mu = mu1, Sigma = sigma)
density2 <- mvrnorm(n = 500, mu = mu2, Sigma = sigma)
density_df <- as.data.frame(rbind(density1, density2))
colnames(density_df) <- c("x", "y")
# Generate Synthetic HMC-like Trajectories
trajectory_hmc <- data.frame(
x = c(-3, -2, -1, 0, 1, 1.5),
y = c(-3, -2.5, -1, 1, 2, 2.5),
method = "HMC"
)
trajectory_ra_hmc <- data.frame(
x = c(-3, -1.5, -0.5, 0.5, 1.5, 2),
y = c(-3, -1.8, -1, 0, 1.5, 2.8),
method = "RA-HMC"
)
trajectory_neg_friction <- data.frame(
x = c(-3, -1, 0, 1, 3),
y = c(-3, -1, 0.5, 1.8, 3),
method = "Negative Friction"
)
# Combine all trajectories
trajectories <- bind_rows(trajectory_hmc, trajectory_ra_hmc, trajectory_neg_friction)
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_minimal() +
labs(title = "HMC vs RA-HMC Sampling Trajectories",
x = "X-axis", y = "Y-axis") +
theme(legend.position = "bottom")
#####################################
# Option - 2
#####################################
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "magma") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "plasma") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "inferno") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "viridis") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "cividis") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "turbo") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_viridis_c(option = "viridis") +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_gradientn(colors = terrain.colors(10)) +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
# Plot using ggplot2
ggplot() +
stat_density_2d(data = density_df, aes(x = x, y = y, fill = ..level..), geom = "polygon", alpha = 0.3) +
scale_fill_gradientn(colors = c("#FFC0CB", "#FF7F50", "#FF4500")) +
geom_path(data = trajectories, aes(x = x, y = y, color = method, group = method), size = 1.2) +
geom_point(data = trajectories, aes(x = x, y = y, color = method), size = 3, shape = 21, fill = "white") +
theme_void() +  # Removes background grid and axes
theme(legend.position = "bottom",
legend.title = element_blank())  # Removes legend title
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-500,500, length = 1e3)
p0 <- seq(-500,500, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-500,500, length = 1e3)
p0 <- seq(-500,500, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-500,500, length = 1e3)
p0 <- seq(-500,500, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
plot3d(x0, p0, lc(x0,po))
plot3d(x0, p0, lc(x0,p0))
x0 <- seq(-100,100, length = 1e3)
p0 <- seq(-100,100, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, lc(x0,p0))
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 1e3)
p0 <- seq(-1000,1000, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 2e3)
p0 <- seq(-1000,1000, length = 2e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 3e3)
p0 <- seq(-1000,1000, length = 3e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
x0 <- seq(-1000,1000, length = 4e3)
p0 <- seq(-1000,1000, length = 4e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
x0 <- seq(-1000,1000, length = 5e3)
p0 <- seq(-1000,1000, length = 5e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
setwd("~/Course Work/SEM-6/MTH443/MTH443-GroupProject/Code")
dat <- read.csv("fraudTrain.csv")
dat <- read.csv("Data/fraudTrain.csv")
dat <- read.csv("Data\fraudTrain.csv")
dat <- read.csv("../Data/fraudTrain.csv")
head(dat)
View(dat)
str(dat)
## Checking a few trends
table(dat$category)
hist(dat$category)
barplot(dat$category)
barplot(table(dat$category))
barplot(table(dat$category),
las = 2)
barplot(table(dat$category),
las = 3)
barplot(table(dat$category),
las = 4)
barplot(table(dat$category),
las = 2)
barplot(table(dat$category),
las = 2,
cex.names = 0.7)
barplot(table(dat$category),
las = 2,
cex.names = 0.7,
main = "Distribution of categories")
barplot(table(dat$category),
las = 2,
cex.names = 0.7,
main = "Distribution of categories")
barplot(table(dat$category),
las = 2,
cex.names = 0.7,
main = "Distribution of categories",
cex.main = 1.5)
barplot(table(dat$category),
las = 2,
cex.names = 0.7,
main = "Distribution of Usage Categories",
cex.main = 1.5)
str(dat)
library(dplyr)
library(lubridate)
library(tidyr)
library(caret)
install.packages("caret")
library(caret)
library(e1071)
library(e1071)
library(e1071)
library(cluster)
library(dbscan)
library(solitude)   # Isolation Forest
install.packages(c("solitude", "depmixS4", "reticulate", "nimble"))
library(solitude)   # Isolation Forest
library(depmixS4)   # HMMs
library(reticulate) # Python interface
library(ggplot2)
library(nimble)
## Reading the data
df <- read.csv("../Data/fraudTrain.csv")
# Basic preprocessing
df$trans_date_trans_time <- ymd_hms(df$trans_date_trans_time)
