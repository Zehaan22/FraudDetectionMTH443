return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 1e3)
p0 <- seq(-1000,1000, length = 1e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 2e3)
p0 <- seq(-1000,1000, length = 2e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
## libraries
library(rgl)
## function for the level curve
lc <- function(x0, p0, beta = 0.5, t=5){
scl <- (beta-1)/(2*beta)
cyl.1 <- (sin(sqrt(beta)*t)^2)*(p0^2 - x0^2*beta)
cyl.2 <- sin(sqrt(beta)*t)*cos(sqrt(beta)*t)*(2*beta*x0*p0)
return (scl*(cyl.1+cyl.2))
}
x0 <- seq(-1000,1000, length = 3e3)
p0 <- seq(-1000,1000, length = 3e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
x0 <- seq(-1000,1000, length = 4e3)
p0 <- seq(-1000,1000, length = 4e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
x0 <- seq(-1000,1000, length = 5e3)
p0 <- seq(-1000,1000, length = 5e3)
## X0 P0 plot
z <- outer(x0, p0, lc)
plot3d(x0, p0, z)
library(ggplot2)
tibble(t = seq(0, 10, 0.1), h1 = 0.5, h2 = 1.0) %>%
ggplot(aes(x = t)) +
geom_line(aes(y = h2, color = "Control")) +
geom_line(aes(y = h1, color = "Treatment")) +
annotate("text", x = 5, y = 0.7, label = "HR = 0.5") +
labs(y = "h(t)", color = "Group")
library(tibble)
library(ggplot2)
library(tibble)
tibble(t = seq(0, 10, 0.1), h1 = 0.5, h2 = 1.0) %>%
ggplot(aes(x = t)) +
geom_line(aes(y = h2, color = "Control")) +
geom_line(aes(y = h1, color = "Treatment")) +
annotate("text", x = 5, y = 0.7, label = "HR = 0.5") +
labs(y = "h(t)", color = "Group")
# Load required packages
library(survival)
library(ggplot2)
library(survminer)
install.packages("survminer")
library(survminer)
# Set seed for reproducibility
set.seed(123)
# Parameters
n <- 200  # Number of patients per group
lambda_control <- 0.2  # Baseline hazard rate for control group
hr <- 0.7  # Target hazard ratio (treatment/control)
lambda_treatment <- lambda_control * hr  # Treatment group hazard rate
# Simulate exponential survival times
control_time <- rexp(n, rate = lambda_control)
treatment_time <- rexp(n, rate = lambda_treatment)
# Create a censoring time (e.g., end of study at time 10)
censoring_time <- 10
control_status <- ifelse(control_time <= censoring_time, 1, 0)
treatment_status <- ifelse(treatment_time <= censoring_time, 1, 0)
control_time <- pmin(control_time, censoring_time)
treatment_time <- pmin(treatment_time, censoring_time)
# Combine into a data frame
time = c(control_time, treatment_time),
# Combine into a data frame
surv_data <- data.frame(
time = c(control_time, treatment_time),
status = c(control_status, treatment_status),
group = rep(c("Control", "Treatment"), each = n)
)
# Fit Kaplan-Meier curves
km_fit <- survfit(Surv(time, status) ~ group, data = surv_data)
# Plot 1: Kaplan-Meier survival curves
p1 <- ggsurvplot(km_fit, data = surv_data,
pval = TRUE, pval.method = TRUE,
risk.table = TRUE,
title = "Kaplan-Meier Survival Curves",
legend.title = "Group",
legend.labs = c("Control", "Treatment"),
xlab = "Time",
ylab = "Survival Probability",
palette = c("red", "blue"),
ggtheme = theme_minimal())
p1
# Plot 2: Hazard functions (theoretical)
hazard_data <- data.frame(
time = seq(0, 10, length.out = 100),
Control = lambda_control,
Treatment = lambda_treatment
)
p2 <- ggplot(hazard_data, aes(x = time)) +
geom_line(aes(y = Control, color = "Control"), size = 1.5) +
geom_line(aes(y = Treatment, color = "Treatment"), size = 1.5) +
labs(title = "Theoretical Hazard Functions",
x = "Time",
y = "Hazard Rate",
color = "Group") +
scale_color_manual(values = c("red", "blue")) +
annotate("text", x = 5, y = 0.18,
label = paste0("Hazard Ratio = ", hr), size = 5) +
theme_minimal()
p2
# Plot 3: Density of survival times
p3 <- ggplot(surv_data, aes(x = time, fill = group)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Survival Times",
x = "Time",
y = "Density",
fill = "Group") +
scale_fill_manual(values = c("red", "blue")) +
theme_minimal()
p3
# Plot 4: Cumulative events
p4 <- ggplot(surv_data, aes(x = time, color = group)) +
stat_ecdf(size = 1.5) +
labs(title = "Cumulative Event Distribution",
x = "Time",
y = "Proportion of Events",
color = "Group") +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
p4
# Fit Cox model to verify hazard ratio
cox_fit <- coxph(Surv(time, status) ~ group, data = surv_data)
summary(cox_fit)
# Parameters
n <- 2e4  # Number of patients per group
lambda_control <- 0.2  # Baseline hazard rate for control group
hr <- 0.7  # Target hazard ratio (treatment/control)
lambda_treatment <- lambda_control * hr  # Treatment group hazard rate
# Simulate exponential survival times
control_time <- rexp(n, rate = lambda_control)
treatment_time <- rexp(n, rate = lambda_treatment)
# Create a censoring time (e.g., end of study at time 10)
censoring_time <- 10
control_status <- ifelse(control_time <= censoring_time, 1, 0)
treatment_status <- ifelse(treatment_time <= censoring_time, 1, 0)
control_time <- pmin(control_time, censoring_time)
treatment_time <- pmin(treatment_time, censoring_time)
# Combine into a data frame
surv_data <- data.frame(
time = c(control_time, treatment_time),
status = c(control_status, treatment_status),
group = rep(c("Control", "Treatment"), each = n)
)
# Fit Kaplan-Meier curves
km_fit <- survfit(Surv(time, status) ~ group, data = surv_data)
# Plot 1: Kaplan-Meier survival curves
p1 <- ggsurvplot(km_fit, data = surv_data,
pval = TRUE, pval.method = TRUE,
risk.table = TRUE,
title = "Kaplan-Meier Survival Curves",
legend.title = "Group",
legend.labs = c("Control", "Treatment"),
xlab = "Time",
ylab = "Survival Probability",
palette = c("red", "blue"),
ggtheme = theme_minimal())
# Plot 2: Hazard functions (theoretical)
hazard_data <- data.frame(
time = seq(0, 10, length.out = 100),
Control = lambda_control,
Treatment = lambda_treatment
)
p2 <- ggplot(hazard_data, aes(x = time)) +
geom_line(aes(y = Control, color = "Control"), size = 1.5) +
geom_line(aes(y = Treatment, color = "Treatment"), size = 1.5) +
labs(title = "Theoretical Hazard Functions",
x = "Time",
y = "Hazard Rate",
color = "Group") +
scale_color_manual(values = c("red", "blue")) +
annotate("text", x = 5, y = 0.18,
label = paste0("Hazard Ratio = ", hr), size = 5) +
theme_minimal()
# Plot 3: Density of survival times
p3 <- ggplot(surv_data, aes(x = time, fill = group)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Survival Times",
x = "Time",
y = "Density",
fill = "Group") +
scale_fill_manual(values = c("red", "blue")) +
theme_minimal()
# Plot 4: Cumulative events
p4 <- ggplot(surv_data, aes(x = time, color = group)) +
stat_ecdf(size = 1.5) +
labs(title = "Cumulative Event Distribution",
x = "Time",
y = "Proportion of Events",
color = "Group") +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
# Display all plots
print(p1)
print(p2)
print(p3)
print(p4)
# Fit Cox model to verify hazard ratio
cox_fit <- coxph(Surv(time, status) ~ group, data = surv_data)
summary(cox_fit)
p3 <- ggplot(surv_data, aes(x = time, fill = group)) +
geom_density(alpha = 0.5) +
geom_line(aes(y = Control, color = "Control"), size = 1.5) +
geom_line(aes(y = Treatment, color = "Treatment"), size = 1.5) +
labs(title = "Theoretical Hazard Functions",
x = "Time",
y = "Hazard Rate",
color = "Group",
fill = "Group") +
scale_color_manual(values = c("red", "blue"))
theme_minimal()
p3
# Parameters
n <- 500  # Number of patients per group
lambda_control <- 0.2  # Baseline hazard rate for control group
hr <- 0.7  # Target hazard ratio (treatment/control)
lambda_treatment <- lambda_control * hr  # Treatment group hazard rate
# Simulate exponential survival times
control_time <- rexp(n, rate = lambda_control)
treatment_time <- rexp(n, rate = lambda_treatment)
# Create a censoring time (e.g., end of study at time 10)
censoring_time <- 10
control_status <- ifelse(control_time <= censoring_time, 1, 0)
treatment_status <- ifelse(treatment_time <= censoring_time, 1, 0)
control_time <- pmin(control_time, censoring_time)
treatment_time <- pmin(treatment_time, censoring_time)
# Combine into a data frame
surv_data <- data.frame(
time = c(control_time, treatment_time),
status = c(control_status, treatment_status),
group = rep(c("Control", "Treatment"), each = n)
)
# Fit Kaplan-Meier curves
km_fit <- survfit(Surv(time, status) ~ group, data = surv_data)
# Plot 1: Kaplan-Meier survival curves
p1 <- ggsurvplot(km_fit, data = surv_data,
pval = TRUE, pval.method = TRUE,
risk.table = TRUE,
title = "Kaplan-Meier Survival Curves",
legend.title = "Group",
legend.labs = c("Control", "Treatment"),
xlab = "Time",
ylab = "Survival Probability",
palette = c("red", "blue"),
ggtheme = theme_minimal())
# Plot 2: Hazard functions (theoretical)
hazard_data <- data.frame(
time = seq(0, 10, length.out = 100),
Control = lambda_control,
Treatment = lambda_treatment
)
p2 <- ggplot(hazard_data, aes(x = time)) +
geom_line(aes(y = Control, color = "Control"), size = 1.5) +
geom_line(aes(y = Treatment, color = "Treatment"), size = 1.5) +
labs(title = "Theoretical Hazard Functions",
x = "Time",
y = "Hazard Rate",
color = "Group") +
scale_color_manual(values = c("red", "blue")) +
annotate("text", x = 5, y = 0.18,
label = paste0("Hazard Ratio = ", hr), size = 5) +
theme_minimal()
# Plot 3: Density of survival times
p3 <- ggplot(surv_data, aes(x = time, fill = group)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Survival Times",
x = "Time",
y = "Density",
fill = "Group") +
scale_fill_manual(values = c("red", "blue")) +
theme_minimal()
# Plot 4: Cumulative events
p4 <- ggplot(surv_data, aes(x = time, color = group)) +
stat_ecdf(size = 1.5) +
labs(title = "Cumulative Event Distribution",
x = "Time",
y = "Proportion of Events",
color = "Group") +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
# Display all plots
print(p1)
print(p2)
print(p3)
print(p4)
# Fit Cox model to verify hazard ratio
cox_fit <- coxph(Surv(time, status) ~ group, data = surv_data)
summary(cox_fit)
## Code for theoretical densities
x <- seq(0, 10, length.out = 1e4)
plot(x, dexp(x, rate = lambda_control), type = "l", col = "red", lwd = 2,
xlab = "Time", ylab = "Density", main = "Theoretical Density Functions")
lines(x, dexp(x, rate = lambda_treatment), col = "blue", lwd = 2)
legend("topright", legend = c("Control", "Treatment"),
col = c("red", "blue"), lwd = 2)
plot(x, dexp(x, rate = lambda_control), type = "l", col = "red", lwd = 2,
xlab = "Time", ylab = "Density", main = "Density Functions",
cex.main =2)
lines(x, dexp(x, rate = lambda_treatment), col = "blue", lwd = 2)
legend("topright", legend = c("Control", "Treatment"),
col = c("red", "blue"), lwd = 2)
x <- seq(0, 10, length.out = 1e4)
plot(x, dexp(x, rate = lambda_control), type = "l", col = "red", lwd = 2,
xlab = "Time", ylab = "Density", main = "Density Functions with HR = 0.7",
cex.main =2)
lines(x, dexp(x, rate = lambda_treatment), col = "blue", lwd = 2)
legend("topright", legend = c("Control", "Treatment"),
col = c("red", "blue"), lwd = 2)
legend("topright", legend = c("Control", "Treatment"),
col = c("red", "blue"), lwd = 2,
cex = 1.5, bty = "n")
x <- seq(0, 10, length.out = 1e4)
plot(x, dexp(x, rate = lambda_control), type = "l", col = "red", lwd = 2,
xlab = "Time", ylab = "Density", main = "Density Functions with HR = 0.7",
cex.main =2)
lines(x, dexp(x, rate = lambda_treatment), col = "blue", lwd = 2)
legend("topright", legend = c("Control", "Treatment"),
col = c("red", "blue"), lwd = 2,
cex = 1.5, bty = "n")
x <- seq(0, 10, length.out = 1e4)
plot(x, dexp(x, rate = lambda_control), type = "l", col = "red", lwd = 3,
xlab = "Time", ylab = "Density", main = "Density Functions with HR = 0.7",
cex.main =2)
lines(x, dexp(x, rate = lambda_treatment), col = "blue", lwd = 3)
legend("topright", legend = c("Control", "Treatment"),
col = c("red", "blue"), lwd = 2,
cex = 1.5, bty = "n")
plot(x, dexp(x, rate = lambda_control), type = "l", col = "red", lwd = 3,
xlab = "Time", ylab = "Density", main = "Density Functions with HR = 0.7",
cex.main =2,
bty = "n")
lines(x, dexp(x, rate = lambda_treatment), col = "blue", lwd = 3)
legend("topright", legend = c("Control", "Treatment"),
col = c("red", "blue"), lwd = 2,
cex = 1.5, bty = "n")
ggsurvplot(km_fit, conf.int = TRUE,          # Show CIs
conf.int.style = "ribbon",        # Shaded band
conf.int.alpha = 0.2,             # Transparency
risk.table = TRUE)                # Add risk table
## Loading required libraries
library(dplyr)
library(ggplot2)
## Loading the data
dat <- read.csv("../Data/fraudTrain.csv")
setwd("~/Course Work/SEM-6/MTH443/FraudDetectionMTH443/Code")
## Loading required libraries
library(dplyr)
library(ggplot2)
## Loading the data
dat <- read.csv("../Data/fraudTrain.csv")
frauds.per.cat <- dat %>%
group_by(category) %>%
summarise(count.fraud = length(which(is_fraud == 1)),
count.clean = length(which(is_fraud == 0)))
View(frauds.per.cat)
## Making a bar plot for the frauds per category
ggplot(frauds.per.cat, aes(x = category)) +
geom_bar(aes(y = count.fraud), stat = "identity", fill = "red") +
geom_bar(aes(y = count.clean), stat = "identity", fill = "green") +
labs(title = "Frauds per category",
x = "Category",
y = "Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Reshape data to long format for stacking
frauds.per.cat.long <- frauds.per.cat %>%
pivot_longer(cols = c(count.fraud, count.clean),
names_to = "type",
values_to = "count") %>%
mutate(type = recode(type,
count.fraud = "Fraud",
count.clean = "Clean"))
library(tidyr)
# Reshape data to long format for stacking
frauds.per.cat.long <- frauds.per.cat %>%
pivot_longer(cols = c(count.fraud, count.clean),
names_to = "type",
values_to = "count") %>%
mutate(type = recode(type,
count.fraud = "Fraud",
count.clean = "Clean"))
# Plot stacked bars
ggplot(frauds.per.cat.long, aes(x = category, y = count, fill = type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Fraud" = "red", "Clean" = "green")) +
labs(title = "Frauds per Category",
x = "Category",
y = "Transaction Count",
fill = "Transaction Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## Making a bar plot for the frauds per category
ggplot(frauds.per.cat, aes(x = category)) +
geom_bar(aes(y = count.fraud), stat = "identity", fill = "red") +
geom_bar(aes(y = count.clean), stat = "identity", fill = "green") +
labs(title = "Frauds per category",
x = "Category",
y = "Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plot stacked bars
ggplot(frauds.per.cat.long, aes(x = category, y = count, fill = type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Fraud" = "red2", "Clean" = "green3")) +
labs(title = "Frauds per Category",
x = "Category",
y = "Transaction Count",
fill = "Transaction Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert data to long format
frauds.per.cat.long <- frauds.per.cat %>%
pivot_longer(cols = c(count.clean, count.fraud),  # clean first
names_to = "type",
values_to = "count") %>%
mutate(type = recode(type,
count.fraud = "Fraud",
count.clean = "Clean"),
# Order so "Clean" is below and "Fraud" stacks on top
type = factor(type, levels = c("Clean", "Fraud")))
# Plot stacked bars with red (fraud) on top
ggplot(frauds.per.cat.long, aes(x = category, y = count, fill = type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Fraud" = "red", "Clean" = "green")) +
labs(title = "Frauds per Category",
x = "Category",
y = "Transaction Count",
fill = "Transaction Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert data to long format
frauds.per.cat.long <- frauds.per.cat %>%
pivot_longer(cols = c(count.clean, count.fraud),  # clean first
names_to = "type",
values_to = "count") %>%
mutate(type = recode(type,
count.fraud = "Fraud",
count.clean = "Clean"),
# Order so "Clean" is below and "Fraud" stacks on top
type = factor(type, levels = c("Clean", "Fraud")))
# Plot stacked bars with red (fraud) on top
ggplot(frauds.per.cat.long, aes(x = category, y = count, fill = type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Fraud" = "red", "Clean" = "green")) +
labs(title = "Frauds per Category",
x = "Category",
y = "Transaction Count",
fill = "Transaction Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plot stacked bars with red (fraud) on top
ggplot(frauds.per.cat.long, aes(x = category, y = count, fill = type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Fraud" = "red2", "Clean" = "green3")) +
labs(title = "Frauds per Category",
x = "Category",
y = "Transaction Count",
fill = "Transaction Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert data to long format
frauds.per.cat.long <- frauds.per.cat %>%
pivot_longer(cols = c(count.clean, count.fraud),  # clean first
names_to = "type",
values_to = "count") %>%
mutate(type = recode(type,
count.clean = "Clean",
count.fraud = "Fraud"),
# Order so "Clean" is below and "Fraud" stacks on top
type = factor(type, levels = c("Clean", "Fraud")))
# Plot stacked bars with red (fraud) on top
ggplot(frauds.per.cat.long, aes(x = category, y = count, fill = type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Fraud" = "red2", "Clean" = "green3")) +
labs(title = "Frauds per Category",
x = "Category",
y = "Transaction Count",
fill = "Transaction Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Make sure the long format stacks Clean first (bottom), then Fraud (top)
frauds.per.cat.long <- frauds.per.cat %>%
pivot_longer(cols = c(count.clean, count.fraud),  # order matters!
names_to = "type",
values_to = "count") %>%
mutate(type = recode(type,
count.fraud = "Fraud",
count.clean = "Clean"),
type = factor(type, levels = c("Clean", "Fraud")))  # fraud on top
# Plot
ggplot(frauds.per.cat.long, aes(x = category, y = count, fill = type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = c("Clean" = "green3", "Fraud" = "red2")) +
labs(title = "Frauds per Category",
x = "Category",
y = "Transaction Count",
fill = "Transaction Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
